package ru.truebusiness.liveposter_android_client.view.viewmodel

import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import ru.truebusiness.liveposter_android_client.data.Event
import ru.truebusiness.liveposter_android_client.data.EventCategory
import ru.truebusiness.liveposter_android_client.data.FilterState
import ru.truebusiness.liveposter_android_client.data.MainTab
import ru.truebusiness.liveposter_android_client.data.VisitsCategory
import ru.truebusiness.liveposter_android_client.data.EventStatus
import ru.truebusiness.liveposter_android_client.data.SortField
import ru.truebusiness.liveposter_android_client.data.SortOrder
import ru.truebusiness.liveposter_android_client.data.EventsCategory
import ru.truebusiness.liveposter_android_client.data.getAvailableSortFields
import ru.truebusiness.liveposter_android_client.data.getDefaultSortField
import ru.truebusiness.liveposter_android_client.repository.EventRepository
import ru.truebusiness.liveposter_android_client.repository.mocks.mockCurrentUserId
import ru.truebusiness.liveposter_android_client.utils.DateUtils

/**
 * –î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±–∏–∑–Ω–µ—Å—Å –ª–æ–≥–∏–∫–æ–π –º–µ–æ–ø—Ä–∏—è—Ç–∏–π. –û–Ω —Ö—Ä–∞–Ω–∏—Ç –∏
 * —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
 */
class EventsViewModel: ViewModel() {

    private val TAG = "EVENT_VIEW_MODEL"

    private val repository = EventRepository()

    private val _events = MutableLiveData<List<Event>>(emptyList())
    val events: LiveData<List<Event>> = _events

    private val _isLoading = MutableLiveData(false)
    val isLoading: LiveData<Boolean> = _isLoading

    private val _selectedCategory = MutableLiveData<EventCategory>(EventCategory.ALL)
    val selectedCategory: LiveData<EventCategory> = _selectedCategory

    // New comprehensive filtering properties
    private val _filterState = MutableLiveData(FilterState())
    val filterState: LiveData<FilterState> = _filterState

    private val _currentMainTab = MutableLiveData(MainTab.VISITS)
    val currentMainTab: LiveData<MainTab> = _currentMainTab

    private val _currentVisitsCategory = MutableLiveData(VisitsCategory.WILLGO)
    val currentVisitsCategory: LiveData<VisitsCategory> = _currentVisitsCategory

    private val _currentEventsCategory = MutableLiveData(EventsCategory.DRAFTS)
    val currentEventsCategory: LiveData<EventsCategory> = _currentEventsCategory

    fun loadEvents() {
        if (_isLoading.value == true) return

        _isLoading.value = true
        Log.d(TAG, "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $selectedCategory...")

        repository.fetchEventsMock(_selectedCategory.value) { newEvents ->
            _isLoading.value = false
            newEvents?.let {
                _events.value = _events.value.orEmpty() + it
            }
        }

        Log.d(TAG, "–ù–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    }

    /**
     * –ú–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö —Å –±–µ–∫–µ–Ω–¥–∞
     */
    fun setCategory(category: EventCategory?) {
        Log.d(TAG, "–°–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ ${category.toString()}")
        _selectedCategory.value = category ?: EventCategory.ALL
        //–û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã –Ω–∞ –º–µ—Å—Ç–æ –Ω–∏—Ö –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å —Å–æ–±—ã—Ç–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        _events.value = emptyList()
        loadEvents()
    }

    /**
     * üîé –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É (–∏–¥—ë—Ç –Ω–∞ –±—ç–∫–µ–Ω–¥)
     */
    fun searchEvents(query: String) {
        if (_isLoading.value == true) return

        _isLoading.value = true
        Log.d(TAG, "–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: $query")

        // TODO(e.vartazaryan): –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≤—ã–∑–æ–≤ api, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫–∏
        repository.searchMockEvents(query) { newEvents ->
            _isLoading.value = false
            newEvents?.let {
                _events.value = it
            }
        }
    }

    // New comprehensive filtering methods

    /**
     * Set main tab and apply appropriate filters
     */
    fun setMainTab(tab: MainTab) {
        _currentMainTab.value = tab
        applyTabSpecificFilters()
    }

    /**
     * Set visits subcategory and apply filters
     */
    fun setVisitsCategory(category: VisitsCategory) {
        _currentVisitsCategory.value = category
        applyTabSpecificFilters()
    }

    /**
     * Set events subcategory and apply filters
     */
    fun setEventsCategory(category: EventsCategory) {
        _currentEventsCategory.value = category
        applyTabSpecificFilters()
    }

    /**
     * Apply tab-specific filter presets
     */
    private fun applyTabSpecificFilters() {
        val tab = _currentMainTab.value ?: MainTab.VISITS

        if (tab == MainTab.VISITS) {
            val category = _currentVisitsCategory.value ?: VisitsCategory.WILLGO
            when (category) {
                VisitsCategory.WILLGO -> applyWillGoFilters()
                VisitsCategory.VISITED -> applyVisitedFilters()
            }
        } else if (tab == MainTab.EVENTS) {
            val category = _currentEventsCategory.value ?: EventsCategory.DRAFTS
            when (category) {
                EventsCategory.DRAFTS -> applyDraftsFilters()
                EventsCategory.PLANNED -> applyPlannedFilters()
                EventsCategory.COMPLETED -> applyCompletedFilters()
            }
        }

        loadEventsWithFilters()
        sortEventsLocally()
    }

    /**
     * Apply "–Ø –ø–æ–π–¥—É" filters
     */
    private fun applyWillGoFilters() {
        val now = DateUtils.getCurrentDateTimeString()
        _filterState.value = FilterState(
            location = null, // –≤—Å–µ
            minPrice = null,
            maxPrice = null,
            minStartTime = now, // —Å–µ–π—á–∞—Å
            maxStartTime = null,
            minDuration = null,
            maxDuration = null,
            organizer = null, // –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å
            userParticipating = true, // —É—á–∞—Å—Ç–≤—É—é
            eventStatus = EventStatus.PUBLISHED, // –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
            isPublic = null, // –≤—Å–µ
            sortBy = getDefaultSortField(MainTab.VISITS, VisitsCategory.WILLGO),
            sortOrder = SortOrder.ASC, // –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            query = ""
        )
    }

    /**
     * Apply "–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ" filters
     */
    private fun applyVisitedFilters() {
        val now = DateUtils.getCurrentDateTimeString()
        _filterState.value = FilterState(
            location = null, // –≤—Å–µ
            minPrice = null,
            maxPrice = null,
            minStartTime = null,
            maxStartTime = now, // —Å–µ–π—á–∞—Å
            minDuration = null,
            maxDuration = null,
            organizer = null, // –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å
            userParticipating = true, // —É—á–∞—Å—Ç–≤—É—é
            eventStatus = EventStatus.COMPLETED, // –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            isPublic = null, // –≤—Å–µ
            sortBy = getDefaultSortField(MainTab.VISITS, VisitsCategory.VISITED),
            sortOrder = SortOrder.DESC, // –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            query = ""
        )
    }

    /**
     * Apply "–ß–µ—Ä–Ω–æ–≤–∏–∫–∏" filters
     */
    private fun applyDraftsFilters() {
        _filterState.value = FilterState(
            location = null, // –≤—Å–µ
            minPrice = null,
            maxPrice = null,
            minStartTime = null,
            maxStartTime = null,
            minDuration = null,
            maxDuration = null,
            organizer = null, // –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å
            organizerId = mockCurrentUserId, // id-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userParticipating = null, // –≤—Å–µ
            eventStatus = EventStatus.DRAFT, // —á–µ—Ä–Ω–æ–≤–∏–∫
            isPublic = null, // –≤—Å–µ
            sortBy = getDefaultSortField(MainTab.EVENTS, eventsCategory = EventsCategory.DRAFTS),
            sortOrder = SortOrder.ASC, // –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (–∞ -> —è)
            query = ""
        )
    }

    /**
     * Apply "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ" filters
     */
    private fun applyPlannedFilters() {
        val now = DateUtils.getCurrentDateTimeString()
        _filterState.value = FilterState(
            location = null, // –≤—Å–µ
            minPrice = null,
            maxPrice = null,
            minStartTime = now, // —Å–µ–π—á–∞—Å
            maxStartTime = null,
            minDuration = null,
            maxDuration = null,
            organizer = null, // –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å
            organizerId = mockCurrentUserId, // id-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userParticipating = null, // –≤—Å–µ
            eventStatus = EventStatus.PUBLISHED, // –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
            isPublic = null, // –≤—Å–µ
            sortBy = getDefaultSortField(MainTab.EVENTS, eventsCategory = EventsCategory.PLANNED),
            sortOrder = SortOrder.ASC, // –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (—Å–Ω–∞—á–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ)
            query = ""
        )
    }

    /**
     * Apply "–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ" filters
     */
    private fun applyCompletedFilters() {
        val now = DateUtils.getCurrentDateTimeString()
        _filterState.value = FilterState(
            location = null, // –≤—Å–µ
            minPrice = null,
            maxPrice = null,
            minStartTime = null,
            maxStartTime = now, // —Å–µ–π—á–∞—Å
            minDuration = null,
            maxDuration = null,
            organizer = null, // –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å
            organizerId = mockCurrentUserId, // id-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userParticipating = null, // –≤—Å–µ
            eventStatus = EventStatus.COMPLETED, // –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            isPublic = null, // –≤—Å–µ
            sortBy = getDefaultSortField(MainTab.EVENTS, eventsCategory = EventsCategory.COMPLETED),
            sortOrder = SortOrder.DESC, // –ø–æ —É–±—ã–≤–∞–Ω–∏—é (—Å–Ω–∞—á–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ)
            query = ""
        )
    }

    /**
     * Update sort order from filter dialog - applies sorting locally to existing data
     */
    fun updateSortOrder(sortBy: SortField, sortOrder: SortOrder) {
        val currentFilter = _filterState.value ?: FilterState()
        _filterState.value = currentFilter.copy(
            sortBy = sortBy,
            sortOrder = sortOrder
        )
        // Apply sorting locally to existing events without API call
        sortEventsLocally()
    }

    /**
     * Sort events locally based on current filter state
     */
    private fun sortEventsLocally() {
        val currentEvents = _events.value ?: return
        val filter = _filterState.value ?: return
        
        val sortedEvents = when (filter.sortBy) {
            SortField.START_DATE -> {
                if (filter.sortOrder == SortOrder.ASC) {
                    currentEvents.sortedBy { it.startDate }
                } else {
                    currentEvents.sortedByDescending { it.startDate }
                }
            }
            SortField.TITLE -> {
                if (filter.sortOrder == SortOrder.ASC) {
                    currentEvents.sortedBy { it.title }
                } else {
                    currentEvents.sortedByDescending { it.title }
                }
            }
            SortField.PRICE -> {
                if (filter.sortOrder == SortOrder.ASC) {
                    currentEvents.sortedBy { it.price ?: Double.MAX_VALUE }
                } else {
                    currentEvents.sortedByDescending { it.price ?: 0.0 }
                }
            }
            SortField.LOCATION -> {
                if (filter.sortOrder == SortOrder.ASC) {
                    currentEvents.sortedBy { it.location }
                } else {
                    currentEvents.sortedByDescending { it.location }
                }
            }
        }
        
        _events.value = sortedEvents
    }

    /**
     * Load events with current filters
     */
    fun loadEventsWithFilters() {
        if (_isLoading.value == true) return

        _isLoading.value = true
        val filter = _filterState.value ?: FilterState()

        repository.fetchEventsWithFilterMock(filter) { newEvents ->
            _isLoading.value = false
            newEvents?.let {
                _events.value = it
            }
        }
    }

    /**
     * Initialize the ViewModel with default state
     */
    fun initialize() {
        applyTabSpecificFilters()
    }
}