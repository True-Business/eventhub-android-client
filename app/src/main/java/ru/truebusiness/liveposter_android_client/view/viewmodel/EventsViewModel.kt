package ru.truebusiness.liveposter_android_client.view.viewmodel

import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import ru.truebusiness.liveposter_android_client.data.Event
import ru.truebusiness.liveposter_android_client.data.EventCategory
import ru.truebusiness.liveposter_android_client.repository.EventRepository

/**
 * –î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±–∏–∑–Ω–µ—Å—Å –ª–æ–≥–∏–∫–æ–π –º–µ–æ–ø—Ä–∏—è—Ç–∏–π. –û–Ω —Ö—Ä–∞–Ω–∏—Ç –∏
 * —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
 */
class EventsViewModel: ViewModel() {

    private val TAG = "EVENT_VIEW_MODEL"

    private val repository = EventRepository()

    private val _events = MutableLiveData<List<Event>>(emptyList())
    val events: LiveData<List<Event>> = _events

    private val _isLoading = MutableLiveData(false)
    val isLoading: LiveData<Boolean> = _isLoading

    private val _selectedCategory = MutableLiveData<EventCategory>(EventCategory.ALL)
    val selectedCategory: LiveData<EventCategory> = _selectedCategory

    fun loadEvents() {
        if (_isLoading.value == true) return

        _isLoading.value = true
        Log.d(TAG, "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $selectedCategory...")

        repository.fetchEventsMock(_selectedCategory.value) { newEvents ->
            _isLoading.value = false
            newEvents?.let {
                _events.value = _events.value.orEmpty() + it
            }
        }

        Log.d(TAG, "–ù–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    }

    /**
     * –ú–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö —Å –±–µ–∫–µ–Ω–¥–∞
     */
    fun setCategory(category: EventCategory?) {
        Log.d(TAG, "–°–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ ${category.toString()}")
        _selectedCategory.value = category ?: EventCategory.ALL
        //–û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã –Ω–∞ –º–µ—Å—Ç–æ –Ω–∏—Ö –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å —Å–æ–±—ã—Ç–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        _events.value = emptyList()
        loadEvents()
    }

    /**
     * üîé –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É (–∏–¥—ë—Ç –Ω–∞ –±—ç–∫–µ–Ω–¥)
     */
    fun searchEvents(query: String) {
        if (_isLoading.value == true) return

        _isLoading.value = true
        Log.d(TAG, "–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: $query")

        // TODO(e.vartazaryan): –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –≤—ã–∑–æ–≤ api, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫–∏
        repository.searchMockEvents(query) { newEvents ->
            _isLoading.value = false
            newEvents?.let {
                _events.value = it
            }
        }
    }
}